name: CI

on:
  push:
    branches:
      - auto
      - master
      - try

  pull_request:

env:
  NODE_VERSION: 14.18.1
  RUST_VERSION: 1.57.0

jobs:
  frontend:
    name: Frontend
    runs-on: ubuntu-20.04
    env:
      JOBS: 1 # See https://git.io/vdao3 for details.

      # Percy secrets are included here to enable Percy's GitHub integration
      # on community-submitted PRs
      PERCY_TOKEN: 0d8707a02b19aebbec79bb0bf302b8d2fa95edb33169cfe41b084289596670b1
      PERCY_PROJECT: crates-io/crates.io

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install node modules
        run: yarn install

      - name: Lint
        run: |
          yarn lint:hbs
          yarn lint:js
          yarn lint:deps

      - name: Run percy exec
        if: github.repository == 'rust-lang/crates.io'
        run: npx percy exec -- npm run test-coverage

      - name: test-coverage
        if: github.repository != 'rust-lang/crates.io'
        run: yarn test-coverage

  embroider:
    name: Frontend (embroider)
    runs-on: ubuntu-20.04
    env:
      USE_EMBROIDER: 'true'

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - run: yarn install

      # `yarn test` currently does not work due to https://github.com/embroider-build/embroider/issues/677
      - run: yarn build
        continue-on-error: true

  backend-lint:
    name: Backend (linting)
    runs-on: ubuntu-20.04

    env:
      RUSTFLAGS: "-D warnings"

    steps:
      - uses: actions/checkout@v2

      - run: rustup default ${{ env.RUST_VERSION }}
      - run: rustup component add rustfmt
      - run: rustup component add clippy

      - uses: Swatinem/rust-cache@v1.3.0

      - run: cargo fmt -- --check
      - run: cargo clippy --all-targets --all-features --all

  backend:
    name: Backend
    runs-on: ubuntu-20.04

    continue-on-error: ${{ matrix.rust != 'stable' }}
    strategy:
      matrix:
        rust:
          - stable
          - beta

    env:
      RUST_BACKTRACE: 1
      DATABASE_URL: postgres://postgres:postgres@localhost/cargo_registry_test
      TEST_DATABASE_URL: postgres://postgres:postgres@localhost/cargo_registry_test
      RUSTFLAGS: "-D warnings"
      MALLOC_CONF: "background_thread:true,abort_conf:true,abort:true,junk:true"

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2

      - name: Install ${{ env.RUST_VERSION }} Rust
        if: matrix.rust == 'stable'
        run: |
          rustup update ${{ env.RUST_VERSION }}
          rustup default ${{ env.RUST_VERSION }}

      - name: Install ${{ matrix.rust }} Rust
        if: matrix.rust != 'stable'
        run: |
          rustup update ${{ matrix.rust }}
          rustup default ${{ matrix.rust }}

      - uses: Swatinem/rust-cache@v1.3.0

      - name: Setup database
        run: |
          cargo install diesel_cli --vers $(cat .diesel_version) --no-default-features --features postgres --debug
          diesel database setup --locked-schema

      - name: Install cargo-tarpaulin
        if: matrix.rust == 'stable'
        run: cargo install cargo-tarpaulin --version ~0.18.0-alpha.3

      - name: Run tests (with coverage report)
        if: matrix.rust == 'stable'
        run: cargo tarpaulin --avoid-cfg-tarpaulin --workspace

      - name: Run tests
        if: matrix.rust != 'stable'
        run: cargo test --workspace


  # These jobs doesn't actually test anything, but they're only used to tell
  # bors the build completed, as there is no practical way to detect when a
  # workflow is successful listening to webhooks only.
  #
  # ALL THE PREVIOUS JOBS NEEDS TO BE ADDED TO THE `needs` SECTION OF THIS JOB!

  end-success:
    name: bors build finished
    if: success()
    runs-on: ubuntu-latest
    needs: [frontend, backend, backend-lint]

    steps:
      - name: Mark the job as successful
        run: exit 0

  end-failure:
    name: bors build finished
    if: "!success()"
    runs-on: ubuntu-latest
    needs: [frontend, backend, backend-lint]

    steps:
      - name: Mark the job as a failure
        run: exit 1
