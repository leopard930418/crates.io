name: CI

on:
  push:
    branches:
      - auto
      - master
      - try

  pull_request:

jobs:
  frontend:
    name: Frontend
    runs-on: ubuntu-18.04
    env:
      JOBS: 1 # See https://git.io/vdao3 for details.

      # Percy secrets are included here to enable Percy's GitHub integration
      # on community-submitted PRs
      PERCY_TOKEN: 0d8707a02b19aebbec79bb0bf302b8d2fa95edb33169cfe41b084289596670b1
      PERCY_PROJECT: crates-io/crates.io

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Install node modules
        run: npm ci

      - name: Lint
        run: |
          npm run lint:hbs
          npm run lint:js
          npm run lint:deps

      - name: Add nonce for parallel tests
        run: echo "PERCY_PARALLEL_NONCE=`date +%s`" >> $GITHUB_ENV

      - name: Run percy exec
        run: npx percy exec -- npm run test-coverage

  backend:
    name: Backend
    runs-on: ubuntu-16.04
    strategy:
      # TODO: [ci] should be true if GitHub Actions supports ""allow failures" on matrix
      fail-fast: false
      matrix:
        rust:
          - stable
          - beta

    env:
      RUST_BACKTRACE: 1
      DATABASE_URL: postgres://postgres:postgres@localhost/cargo_registry_test
      TEST_DATABASE_URL: postgres://postgres:postgres@localhost/cargo_registry_test
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: "-C debuginfo=0 -D warnings"
      MALLOC_CONF: "background_thread:true,abort_conf:true,abort:true,junk:true"

    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2

      - name: Cleanup pre-installed Rust toolchains
        # The pre-installed toolchain is under root permission, and this would
        # make tarball fail to extract. Here we remove the symlink and install
        # our own Rust toolchain if necessary.
        run: |
          which rustup
          which cargo
          if [[ -L "$HOME/.cargo" && -L "$HOME/.rustup" ]]; then
              rm -v "$HOME/.rustup"
              rm -v "$HOME/.cargo"
          fi
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      # Cache `diesel` binary
      #
      # The other binaries (like `rustc`) will be overwritten by rustup.
      #
      # Current size as of 2019-12-23: ~6 MB
      - name: Cache cargo binaries
        uses: actions/cache@v2
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-${{ matrix.rust }}-${{ hashFiles('.diesel_version') }}

      # Current size as of 2019-12-23: ~77 MB
      - name: Cache cargo registry cache
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry/cache
          key: ${{ runner.os }}-cargo-registry-cache-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-cache-${{ matrix.rust }}-
            ${{ runner.os }}-cargo-registry-cache-

      # Current size as of 2019-12-23: ~38 MB
      - name: Cache cargo registry index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry/index
          key: ${{ runner.os }}-cargo-registry-index-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-index-${{ matrix.rust }}-
            ${{ runner.os }}-cargo-registry-index-

      # Current size as of 2019-12-23: ~4 MB
      - name: Cache cargo git db
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git/db
          key: ${{ runner.os }}-cargo-git-db-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-db-${{ matrix.rust }}-
            ${{ runner.os }}-cargo-git-db-

      - name: Install ${{ matrix.rust }} Rust
        run: |
          if [[ ! -d "$HOME/.cargo" || ! -d "$HOME/.rustup" ]]; then
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init.sh
              sh rustup-init.sh -y --default-toolchain none
          fi
          rustup set profile minimal
          rustup update ${{ matrix.rust }}
          rustup default ${{ matrix.rust }}

      - name: Install lint tools
        if: matrix.rust == 'stable'
        run: |
          rustup component add rustfmt
          rustup component add clippy

      - id: rustc
        run:
          echo "::set-output name=version::$(rustc -V)"

      # Current size as of 2019-12-23: ~336 MB
      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ steps.rustc.outputs.version }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-${{ steps.rustc.outputs.version }}-

      - name: Cargo clean on new rustc version
        run: script/ci/cargo-clean-on-new-rustc-version.sh

      - name: Setup database
        run: |
          which diesel || cargo install diesel_cli --vers $(cat .diesel_version) --no-default-features --features postgres --debug
          diesel database setup --locked-schema

      - name: Lint
        if: matrix.rust == 'stable'
        run: |
          cargo fmt -- --check
          cargo clippy --all-targets --all-features --all

      - name: Test
        run: cargo test

      - name: Prune unnecessary cache
        run: script/ci/prune-cache.sh


  # These jobs doesn't actually test anything, but they're only used to tell
  # bors the build completed, as there is no practical way to detect when a
  # workflow is successful listening to webhooks only.
  #
  # ALL THE PREVIOUS JOBS NEEDS TO BE ADDED TO THE `needs` SECTION OF THIS JOB!

  end-success:
    name: bors build finished
    if: success()
    runs-on: ubuntu-latest
    needs: [frontend, backend]

    steps:
      - name: Mark the job as successful
        run: exit 0

  end-failure:
    name: bors build finished
    if: "!success()"
    runs-on: ubuntu-latest
    needs: [frontend, backend]

    steps:
      - name: Mark the job as a failure
        run: exit 1
